- Class: meta
  Course: Grammar_02
  Lesson: Importing_Excel_data
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: Excel是一个非常广泛使用的数据分析工具。 但是，如果您更愿意在R中进行分析，您需要了解如何将CSV数据导入到R中。
    本章将向您展示如何使用readxl和gdata来实现,这两个包已经为你加载了

- Class: cmd_question
  Output: 你可以在工作目录中找到Excel文件urbanpop.xlsx，输入dir（）来查看它。 这个数据集包含世界上几乎所有国家的城市人口指标（来源：Gapminder）。 
    它包含三个不同时间段的三张表。 在每张表中，第一行包含列名称。
  CorrectAnswer: dir()
  AnswerTests: omnitest(correctExpr='dir()')
  Hint: dir()

- Class: cmd_question
  Output: 在开始从Excel导入之前，您应该了解哪些工作表可用于工作簿。 你可以使用excel_sheets（）函数。excel_sheets（）函数是readxl包里的函数，
    这个函数需要path类型变量作为参数，可以用file.path("urbanpop.xlsx")来生成工作目录下urbanpop.xlsx的path变量
  CorrectAnswer: excel_sheets(file.path("urbanpop.xlsx"))
  AnswerTests: omnitest(correctExpr='excel_sheets(file.path("urbanpop.xlsx"))')
  Hint: 在命令行输入excel_sheets(file.path("urbanpop.xlsx"))

- Class: text
  Output: 现在您知道要导入的Excel文件中的工作表名称，现在可以将这些工作表导入R.您可以使用read_excel（）函数执行此操作。 看看这个方法：
    data < - read_excel(“data.xlsx”，sheet =“my_sheet”)这个调用只是从“data.xlsx”文件中导入名为“my_sheet”的表。 您也可以将一个数字传递给
    表单参数; 这将导致read_excel（）导入带有给定图纸编号的工作表。 sheet = 1将导入第一个工作表，sheet = 2将导入第二个工作表，依此类推。
    在本练习中，您将继续使用urbanpop.xlsx文件。

- Class: cmd_question
  Output: 添加一个命令来导入第一个工作表，并将结果数据框存储在pop_1中
  CorrectAnswer: pop_1 <- read_excel("urbanpop.xlsx", sheet = 1)
  AnswerTests: omnitest(correctExpr='pop_1 <- read_excel("urbanpop.xlsx", sheet = 1)')
  Hint: pop_1 <- read_excel("urbanpop.xlsx", sheet = 1)

- Class: cmd_question
  Output: 添加一个命令来导入第二个工作表，并将结果数据框存储在pop_2中
  CorrectAnswer: pop_2 <- read_excel("urbanpop.xlsx", sheet = 2)
  AnswerTests: omnitest(correctExpr='pop_2 <- read_excel("urbanpop.xlsx", sheet = 2)')
  Hint: pop_2 <- read_excel("urbanpop.xlsx", sheet = 2)

- Class: cmd_question
  Output: 添加一个命令来导入第三个工作表，并将结果数据框存储在pop_3中
  CorrectAnswer: pop_3 <- read_excel("urbanpop.xlsx", sheet = 3)
  AnswerTests: omnitest(correctExpr='pop_3 <- read_excel("urbanpop.xlsx", sheet = 3)')
  Hint: pop_3 <- read_excel("urbanpop.xlsx", sheet = 3)

- Class: cmd_question
  Output: 将数据框pop_1，pop_2和pop_3存储在列表中，叫做pop_list
  CorrectAnswer: pop_list<-list(pop_1,pop_2,pop_3)
  AnswerTests: omnitest(correctExpr='pop_list<-list(pop_1,pop_2,pop_3)')
  Hint: pop_list<-list(pop_1,pop_2,pop_3)

- Class: text
  Output: 在之前的练习中，您生成了三个你导入的Excel表单的列表。 但是，手动加载每个表单然后将它们合并到一个列表中可能会非常繁琐。 
    幸运的是，你可以使用lapply（）自动执行此操作。看看下面的例子代码：my_workbook < - lapply（excel_sheets（“data.xlsx”），read_excel，
    path =“data.xlsx”）read_excel（）函数在“data.xlsx”文件中被多次调用，每个表单被一个接一个地加载。 结果是数据框的列表，
    每个数据框表示data.xlsx中的一个表单。你仍然使用urbanpop.xlsx文件。

- Class: cmd_question
  Output: 使用lapply（）与excel_sheets（）和read_excel（）结合来读取“urbanpop.xlsx”中的所有Excel工作表。 命名结果列表pop_list。
  CorrectAnswer: pop_list <- lapply(excel_sheets("urbanpop.xlsx"),read_excel,path ="urbanpop.xlsx")
  AnswerTests: omnitest(correctExpr='pop_list <- lapply(excel_sheets("urbanpop.xlsx"),read_excel,path ="urbanpop.xlsx")')
  Hint: pop_list <- lapply(excel_sheets("urbanpop.xlsx"),read_excel,path ="urbanpop.xlsx")

- Class: cmd_question
  Output: 打印pop_list的结构。
  CorrectAnswer: pop_list
  AnswerTests: omnitest(correctExpr='pop_list')
  Hint: pop_list
  
- Class: text
  Output: 除了路径和表单之外，还有其他几个可以在read_excel（）中指定的参数。 其中一个参数叫做col_names。默认情况下它是TRUE，
    表示Excel工作表中的第一行是否包含列名。 如果第一行不包括列名，可以将col_names设置为FALSE。 在这种情况下，R会为你选择列名。 
    您也可以选择将col_names设置为每个列名称的字符向量。您将使用urbanpop_nonames.xlsx文件。 它包含与urbanpop.xlsx相同的数据，
    但在Excel表格的第一行没有列名
    
- Class: cmd_question
  Output: 导入“urbanpop_nonames.xlsx”的第一个Excel工作表并将结果存储在pop_a中。 让R设置结果数据框本身的列名
  CorrectAnswer: pop_a <- read_excel("urbanpop_nonames.xlsx", sheet = 1,col_names=FALSE)
  AnswerTests: omnitest(correctExpr='pop_a <- read_excel("urbanpop_nonames.xlsx", sheet = 1,col_names=FALSE)')
  Hint: pop_a <- read_excel("urbanpop_nonames.xlsx", sheet = 1,col_names=FALSE) 
  
- Class: cmd_question
  Output: 打印出pop_a的摘要。
  CorrectAnswer: summary(pop_a)
  AnswerTests: omnitest(correctExpr='summary(pop_a)')
  Hint: summary(pop_a)

- Class: cmd_question
  Output: 导入urbanpop_nonames.xlsx的第一个Excel工作表; 这次使用已经准备好的列向量(cols)来指定列名。 将结果数据框存储在pop_b中。
  CorrectAnswer: pop_b <- read_excel("urbanpop_nonames.xlsx", sheet = 1,col_names=cols)
  AnswerTests: omnitest(correctExpr='pop_b <- read_excel("urbanpop_nonames.xlsx", sheet = 1,col_names=cols)')
  Hint: pop_b <- read_excel("urbanpop_nonames.xlsx", sheet = 1,col_names=cols)

- Class: cmd_question
  Output: 打印出pop_b的摘要。 你能发现与其他摘要的区别吗？
  CorrectAnswer: summary(pop_b)
  AnswerTests: omnitest(correctExpr='summary(pop_b)')
  Hint: summary(pop_b)

- Class: text
  Output: 在Excel文件不太整齐的情况下阅读时，skip参数是非常有用的。 通过跳过(skip)，您可以告诉R忽略要从中提取数据的Excel工作表内的指定行数。 
    看看这个例子：read_excel（“data.xlsx”，skip = 15）在这种情况下，第一张“data.xlsx”中的前15行将被忽略。如果此工作表的第一行包含列名， 
    则此信息也将被readxl忽略。 确保在这种情况下将col_names设置为FALSE或手动指定列名称！文件urbanpop.xlsx在您的目录中可用; 
    它在第一行有列名。

- Class: cmd_question
  Output: 导入第二张“urbanpop.xlsx”，但跳过前21行。 确保设置col_names = FALSE。 将结果数据框存储在变量urbanpop_sel中。
  CorrectAnswer: urbanpop_sel <- read_excel("urbanpop_nonames.xlsx", sheet = 2,col_names=FALSE,skip=21)
  AnswerTests: omnitest(correctExpr='urbanpop_sel <- read_excel("urbanpop_nonames.xlsx", sheet = 2,col_names=FALSE,skip=21)')
  Hint: urbanpop_sel <- read_excel("urbanpop_nonames.xlsx", sheet = 2,col_names=FALSE,skip=21)

- Class: cmd_question
  Output: 从urbanpop_sel中选择第一个观察结果并打印出来
  CorrectAnswer: urbanpop_sel[1]
  AnswerTests: omnitest(correctExpr='urbanpop_sel[1]')
  Hint: urbanpop_sel[1]

- Class: text
  Output: 在本章的这一部分中，您将学习如何使用gdata包导入.xls文件。 与readxl软件包类似，您可以从Excel工作表中导入单个Excel工作表
    以在R中开始分析。您将使用urbanpop.xls数据集，以前使用过的.xls版本的Excel文件。 它在您当前的工作目录中可用。

- Class: cmd_question
  Output: 使用read.xls（）导入名为“urbanpop.xls”的第二张表，名为“1967-1974”。 将结果数据框存储为urban_pop
  CorrectAnswer: urban_pop <- read.xls("urbanpop.xls",sheet=2)
  AnswerTests: omnitest(correctExpr='urban_pop <- read.xls("urbanpop.xls",sheet=2)')
  Hint: urban_pop <- read.xls("urbanpop.xls",sheet=2)

- Class: cmd_question
  Output: 用head（）打印urban_pop的前11个观察值。
  CorrectAnswer: head(urban_pop,11)
  AnswerTests: omnitest(correctExpr='head(urban_pop,11)')
  Hint: head(urban_pop,11)

- Class: text
  Output: read.xls（）包装read.table（）请记住read.xls（）实际上是如何工作的？ 基本上归结为两个步骤：使用Perl脚本将Excel文件转换
    为.csv文件，然后使用默认情况下在R中加载的read.csv（）函数通过utils包读取.csv文件。这意味着您可以在read.csv（）中指定的所有选项
    也可以在read.xls（）中指定。urbanpop.xls数据集已经在你的工作区中可用。 它仍然由三张表组成，每张表的第一行都有列名。

- Class: cmd_question
  Output: 完成read.xls（）调用，从第二张urbanpop.xls中读取数据：跳过工作表的前50行。 确保正确设置标题，列名为你预定义在变量columns中,并且国家名称不作为因子导入
    ，，将结果存储在变量urban_pop中
  CorrectAnswer: urban_pop <- read.xls("urbanpop.xls",sheet=2,skip=50,header=FALSE,col.names=columns,stringsAsFactors=FALSE)
  AnswerTests: omnitest(correctExpr='urban_pop <- read.xls("urbanpop.xls",sheet=2,skip=50,header=FALSE,col.names=columns,stringsAsFactors=FALSE)')
  Hint: urban_pop <- read.xls("urbanpop.xls",sheet=2,skip=50,header=FALSE,col.names=columns,stringsAsFactors=FALSE)

- Class: cmd_question
  Output: 用head（）打印urban_pop的前10个观察值。
  CorrectAnswer: head(urban_pop,10)
  AnswerTests: omnitest(correctExpr='head(urban_pop,10)')
  Hint: head(urban_pop,10)
